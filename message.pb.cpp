// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MessageStruct {

namespace {

const ::google::protobuf::Descriptor* Echo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Echo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogOnorOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogOnorOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChessBoardUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChessBoardUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChessBoardInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChessBoardInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChessBoardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChessBoardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HallInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HallInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* HallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameHallSumaryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameHallSumaryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameHallSumary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameHallSumary_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPlay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPlay_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPlayReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPlayReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveChess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveChess_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reconciled_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reconciled_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiveUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiveUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Undo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Undo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameReadyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameReadyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStatusReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStatusReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindPassword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindPassword_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  Echo_descriptor_ = file->message_type(0);
  static const int Echo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Echo, time_stamp_),
  };
  Echo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Echo_descriptor_,
      Echo::default_instance_,
      Echo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Echo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Echo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Echo));
  LogOnorOut_descriptor_ = file->message_type(1);
  static const int LogOnorOut_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOnorOut, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOnorOut, password_),
  };
  LogOnorOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogOnorOut_descriptor_,
      LogOnorOut::default_instance_,
      LogOnorOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOnorOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOnorOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogOnorOut));
  ReplyStatus_descriptor_ = file->message_type(2);
  static const int ReplyStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyStatus, user_),
  };
  ReplyStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyStatus_descriptor_,
      ReplyStatus::default_instance_,
      ReplyStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyStatus));
  Register_descriptor_ = file->message_type(3);
  static const int Register_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, email_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, username_),
  };
  Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Register_descriptor_,
      Register::default_instance_,
      Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Register));
  ChessBoardUser_descriptor_ = file->message_type(4);
  static const int ChessBoardUser_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardUser, chess_board_empty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardUser, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardUser, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardUser, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardUser, ex_email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardUser, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardUser, head_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardUser, status_),
  };
  ChessBoardUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChessBoardUser_descriptor_,
      ChessBoardUser::default_instance_,
      ChessBoardUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChessBoardUser));
  ChessBoardInfoReq_descriptor_ = file->message_type(5);
  static const int ChessBoardInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardInfoReq, chess_board_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardInfoReq, opcode_),
  };
  ChessBoardInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChessBoardInfoReq_descriptor_,
      ChessBoardInfoReq::default_instance_,
      ChessBoardInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChessBoardInfoReq));
  ChessBoardInfo_descriptor_ = file->message_type(6);
  static const int ChessBoardInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardInfo, people_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardInfo, left_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardInfo, right_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardInfo, bottom_user_),
  };
  ChessBoardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChessBoardInfo_descriptor_,
      ChessBoardInfo::default_instance_,
      ChessBoardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChessBoardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChessBoardInfo));
  HallInfoReq_descriptor_ = file->message_type(7);
  static const int HallInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallInfoReq, game_hall_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallInfoReq, opcode_),
  };
  HallInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HallInfoReq_descriptor_,
      HallInfoReq::default_instance_,
      HallInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HallInfoReq));
  HallInfo_descriptor_ = file->message_type(8);
  static const int HallInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallInfo, game_hall_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallInfo, total_people_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallInfo, curr_people_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallInfo, total_chessboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallInfo, chess_board_),
  };
  HallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HallInfo_descriptor_,
      HallInfo::default_instance_,
      HallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HallInfo));
  GameHallSumaryReq_descriptor_ = file->message_type(9);
  static const int GameHallSumaryReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHallSumaryReq, opcode_),
  };
  GameHallSumaryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameHallSumaryReq_descriptor_,
      GameHallSumaryReq::default_instance_,
      GameHallSumaryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHallSumaryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHallSumaryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameHallSumaryReq));
  GameHallSumary_descriptor_ = file->message_type(10);
  static const int GameHallSumary_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHallSumary, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHallSumary, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHallSumary, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHallSumary, hall_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHallSumary, head_picture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHallSumary, ad_picture1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHallSumary, ad_picture2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHallSumary, hall_info_),
  };
  GameHallSumary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameHallSumary_descriptor_,
      GameHallSumary::default_instance_,
      GameHallSumary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHallSumary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameHallSumary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameHallSumary));
  RequestPlay_descriptor_ = file->message_type(11);
  static const int RequestPlay_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlay, game_hall_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlay, chess_board_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlay, locate_),
  };
  RequestPlay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPlay_descriptor_,
      RequestPlay::default_instance_,
      RequestPlay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPlay));
  RequestPlayReply_descriptor_ = file->message_type(12);
  static const int RequestPlayReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlayReply, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlayReply, first_come_user_locate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlayReply, chessboard_),
  };
  RequestPlayReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPlayReply_descriptor_,
      RequestPlayReply::default_instance_,
      RequestPlayReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlayReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPlayReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPlayReply));
  MoveChess_descriptor_ = file->message_type(13);
  static const int MoveChess_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChess, src_chess_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChess, src_user_locate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChess, from_pointx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChess, from_pointy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChess, des_pointx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChess, des_pointy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChess, is_winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChess, eat_target_chess_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChess, target_user_locate_),
  };
  MoveChess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveChess_descriptor_,
      MoveChess::default_instance_,
      MoveChess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveChess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveChess));
  MoveAction_descriptor_ = file->message_type(14);
  static const int MoveAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAction, src_user_locate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAction, movechess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAction, token_locate_),
  };
  MoveAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveAction_descriptor_,
      MoveAction::default_instance_,
      MoveAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveAction));
  UserMessage_descriptor_ = file->message_type(15);
  static const int UserMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessage, src_user_locate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessage, msgcontent_),
  };
  UserMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMessage_descriptor_,
      UserMessage::default_instance_,
      UserMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMessage));
  SystemMessage_descriptor_ = file->message_type(16);
  static const int SystemMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemMessage, msgcontent_),
  };
  SystemMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemMessage_descriptor_,
      SystemMessage::default_instance_,
      SystemMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemMessage));
  Reconciled_descriptor_ = file->message_type(17);
  static const int Reconciled_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reconciled, apply_or_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reconciled, src_user_locate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reconciled, tar_user_locate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reconciled, status_),
  };
  Reconciled_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reconciled_descriptor_,
      Reconciled::default_instance_,
      Reconciled_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reconciled, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reconciled, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reconciled));
  GiveUp_descriptor_ = file->message_type(18);
  static const int GiveUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveUp, src_user_locate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveUp, opt_),
  };
  GiveUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GiveUp_descriptor_,
      GiveUp::default_instance_,
      GiveUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GiveUp));
  Undo_descriptor_ = file->message_type(19);
  static const int Undo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Undo, rep_or_respon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Undo, src_user_locate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Undo, tar_user_locate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Undo, status_),
  };
  Undo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Undo_descriptor_,
      Undo::default_instance_,
      Undo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Undo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Undo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Undo));
  GameReadyReq_descriptor_ = file->message_type(20);
  static const int GameReadyReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReadyReq, src_user_locate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReadyReq, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReadyReq, total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReadyReq, single_step_time_),
  };
  GameReadyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameReadyReq_descriptor_,
      GameReadyReq::default_instance_,
      GameReadyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReadyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReadyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameReadyReq));
  GameStatusReply_descriptor_ = file->message_type(21);
  static const int GameStatusReply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusReply, left_user_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusReply, right_user_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusReply, bottom_user_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusReply, token_locate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusReply, total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusReply, single_step_time_),
  };
  GameStatusReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStatusReply_descriptor_,
      GameStatusReply::default_instance_,
      GameStatusReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStatusReply));
  FindPassword_descriptor_ = file->message_type(22);
  static const int FindPassword_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPassword, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPassword, opt_),
  };
  FindPassword_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindPassword_descriptor_,
      FindPassword::default_instance_,
      FindPassword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPassword, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPassword, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindPassword));
  UpdateUserInfo_descriptor_ = file->message_type(23);
  static const int UpdateUserInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, ex_email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, head_image_),
  };
  UpdateUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserInfo_descriptor_,
      UpdateUserInfo::default_instance_,
      UpdateUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Echo_descriptor_, &Echo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogOnorOut_descriptor_, &LogOnorOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyStatus_descriptor_, &ReplyStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Register_descriptor_, &Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChessBoardUser_descriptor_, &ChessBoardUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChessBoardInfoReq_descriptor_, &ChessBoardInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChessBoardInfo_descriptor_, &ChessBoardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HallInfoReq_descriptor_, &HallInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HallInfo_descriptor_, &HallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameHallSumaryReq_descriptor_, &GameHallSumaryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameHallSumary_descriptor_, &GameHallSumary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPlay_descriptor_, &RequestPlay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPlayReply_descriptor_, &RequestPlayReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveChess_descriptor_, &MoveChess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveAction_descriptor_, &MoveAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMessage_descriptor_, &UserMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemMessage_descriptor_, &SystemMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reconciled_descriptor_, &Reconciled::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GiveUp_descriptor_, &GiveUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Undo_descriptor_, &Undo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameReadyReq_descriptor_, &GameReadyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStatusReply_descriptor_, &GameStatusReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindPassword_descriptor_, &FindPassword::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserInfo_descriptor_, &UpdateUserInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete Echo::default_instance_;
  delete Echo_reflection_;
  delete LogOnorOut::default_instance_;
  delete LogOnorOut_reflection_;
  delete ReplyStatus::default_instance_;
  delete ReplyStatus_reflection_;
  delete Register::default_instance_;
  delete Register_reflection_;
  delete ChessBoardUser::default_instance_;
  delete ChessBoardUser_reflection_;
  delete ChessBoardInfoReq::default_instance_;
  delete ChessBoardInfoReq_reflection_;
  delete ChessBoardInfo::default_instance_;
  delete ChessBoardInfo_reflection_;
  delete HallInfoReq::default_instance_;
  delete HallInfoReq_reflection_;
  delete HallInfo::default_instance_;
  delete HallInfo_reflection_;
  delete GameHallSumaryReq::default_instance_;
  delete GameHallSumaryReq_reflection_;
  delete GameHallSumary::default_instance_;
  delete GameHallSumary_reflection_;
  delete RequestPlay::default_instance_;
  delete RequestPlay_reflection_;
  delete RequestPlayReply::default_instance_;
  delete RequestPlayReply_reflection_;
  delete MoveChess::default_instance_;
  delete MoveChess_reflection_;
  delete MoveAction::default_instance_;
  delete MoveAction_reflection_;
  delete UserMessage::default_instance_;
  delete UserMessage_reflection_;
  delete SystemMessage::default_instance_;
  delete SystemMessage_reflection_;
  delete Reconciled::default_instance_;
  delete Reconciled_reflection_;
  delete GiveUp::default_instance_;
  delete GiveUp_reflection_;
  delete Undo::default_instance_;
  delete Undo_reflection_;
  delete GameReadyReq::default_instance_;
  delete GameReadyReq_reflection_;
  delete GameStatusReply::default_instance_;
  delete GameStatusReply_reflection_;
  delete FindPassword::default_instance_;
  delete FindPassword_reflection_;
  delete UpdateUserInfo::default_instance_;
  delete UpdateUserInfo_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\rMessageStruct\"\032\n\004Echo\022\022"
    "\n\ntime_stamp\030\001 \001(\t\"/\n\nLogOnorOut\022\017\n\007acco"
    "unt\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\"J\n\013ReplyStat"
    "us\022\016\n\006status\030\001 \002(\r\022+\n\004user\030\002 \001(\0132\035.Messa"
    "geStruct.ChessBoardUser\"E\n\010Register\022\025\n\re"
    "mail_account\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\022\020\n\010"
    "username\030\003 \001(\t\"\243\001\n\016ChessBoardUser\022\031\n\021che"
    "ss_board_empty\030\001 \002(\010\022\021\n\tuser_name\030\002 \001(\t\022"
    "\017\n\007account\030\003 \001(\t\022\r\n\005score\030\004 \001(\005\022\020\n\010ex_em"
    "ail\030\005 \001(\t\022\r\n\005phone\030\006 \001(\t\022\022\n\nhead_image\030\007"
    " \001(\014\022\016\n\006status\030\010 \001(\r\";\n\021ChessBoardInfoRe"
    "q\022\026\n\016chess_board_id\030\001 \002(\005\022\016\n\006opcode\030\002 \001("
    "\005\"\311\001\n\016ChessBoardInfo\022\n\n\002id\030\001 \002(\r\022\022\n\npeop"
    "le_num\030\002 \002(\r\0220\n\tleft_user\030\003 \002(\0132\035.Messag"
    "eStruct.ChessBoardUser\0221\n\nright_user\030\004 \002"
    "(\0132\035.MessageStruct.ChessBoardUser\0222\n\013bot"
    "tom_user\030\005 \002(\0132\035.MessageStruct.ChessBoar"
    "dUser\"3\n\013HallInfoReq\022\024\n\014game_hall_id\030\001 \002"
    "(\005\022\016\n\006opcode\030\002 \001(\005\"\231\001\n\010HallInfo\022\024\n\014game_"
    "hall_id\030\001 \002(\005\022\024\n\014total_people\030\002 \002(\r\022\023\n\013c"
    "urr_people\030\003 \002(\r\022\030\n\020total_chessboard\030\004 \001"
    "(\r\0222\n\013chess_board\030\005 \003(\0132\035.MessageStruct."
    "ChessBoardInfo\"#\n\021GameHallSumaryReq\022\016\n\006o"
    "pcode\030\001 \001(\005\"\300\001\n\016GameHallSumary\022\017\n\007accoun"
    "t\030\001 \002(\t\022\020\n\010username\030\002 \002(\t\022\r\n\005score\030\003 \002(\005"
    "\022\020\n\010hall_num\030\004 \002(\r\022\024\n\014head_picture\030\005 \002(\t"
    "\022\023\n\013ad_picture1\030\006 \002(\t\022\023\n\013ad_picture2\030\007 \001"
    "(\t\022*\n\thall_info\030\010 \003(\0132\027.MessageStruct.Ha"
    "llInfo\"K\n\013RequestPlay\022\024\n\014game_hall_id\030\001 "
    "\002(\005\022\026\n\016chess_board_id\030\002 \002(\005\022\016\n\006locate\030\003 "
    "\002(\005\"u\n\020RequestPlayReply\022\016\n\006status\030\001 \002(\005\022"
    "\036\n\026first_come_user_locate\030\002 \002(\r\0221\n\nchess"
    "Board\030\003 \001(\0132\035.MessageStruct.ChessBoardIn"
    "fo\"\334\001\n\tMoveChess\022\026\n\016src_chess_type\030\001 \002(\005"
    "\022\027\n\017src_user_locate\030\002 \002(\005\022\023\n\013from_pointX"
    "\030\003 \002(\005\022\023\n\013from_pointY\030\004 \002(\005\022\022\n\ndes_point"
    "X\030\005 \002(\005\022\022\n\ndes_pointY\030\006 \002(\005\022\021\n\tis_winner"
    "\030\007 \002(\010\022\035\n\025eat_target_chess_type\030\010 \001(\005\022\032\n"
    "\022target_user_locate\030\t \001(\r\"h\n\nMoveAction\022"
    "\027\n\017src_user_locate\030\001 \002(\r\022+\n\tmovechess\030\002 "
    "\002(\0132\030.MessageStruct.MoveChess\022\024\n\014token_l"
    "ocate\030\003 \002(\r\":\n\013UserMessage\022\027\n\017src_user_l"
    "ocate\030\001 \002(\r\022\022\n\nmsgContent\030\002 \002(\t\"#\n\rSyste"
    "mMessage\022\022\n\nmsgContent\030\001 \002(\t\"f\n\nReconcil"
    "ed\022\026\n\016apply_or_reply\030\001 \002(\r\022\027\n\017src_user_l"
    "ocate\030\002 \002(\r\022\027\n\017tar_user_locate\030\003 \002(\r\022\016\n\006"
    "status\030\004 \001(\t\".\n\006GiveUp\022\027\n\017src_user_locat"
    "e\030\001 \002(\r\022\013\n\003opt\030\002 \001(\t\"_\n\004Undo\022\025\n\rrep_or_r"
    "espon\030\001 \002(\r\022\027\n\017src_user_locate\030\002 \002(\r\022\027\n\017"
    "tar_user_locate\030\003 \002(\r\022\016\n\006status\030\004 \001(\010\"e\n"
    "\014GameReadyReq\022\027\n\017src_user_locate\030\001 \002(\r\022\016"
    "\n\006opcode\030\002 \001(\r\022\022\n\ntotal_time\030\003 \001(\r\022\030\n\020si"
    "ngle_step_time\030\004 \001(\r\"\246\001\n\017GameStatusReply"
    "\022\030\n\020left_user_status\030\001 \002(\010\022\031\n\021right_user"
    "_status\030\002 \002(\010\022\032\n\022bottom_user_status\030\003 \002("
    "\010\022\024\n\014token_locate\030\004 \002(\r\022\022\n\ntotal_time\030\005 "
    "\002(\r\022\030\n\020single_step_time\030\006 \002(\r\"*\n\014FindPas"
    "sword\022\r\n\005email\030\001 \002(\t\022\013\n\003opt\030\002 \001(\t\"{\n\016Upd"
    "ateUserInfo\022\021\n\tuser_name\030\001 \002(\t\022\017\n\007accoun"
    "t\030\002 \002(\t\022\020\n\010password\030\003 \002(\t\022\020\n\010ex_email\030\004 "
    "\001(\t\022\r\n\005phone\030\005 \001(\t\022\022\n\nhead_image\030\006 \001(\014", 2438);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  Echo::default_instance_ = new Echo();
  LogOnorOut::default_instance_ = new LogOnorOut();
  ReplyStatus::default_instance_ = new ReplyStatus();
  Register::default_instance_ = new Register();
  ChessBoardUser::default_instance_ = new ChessBoardUser();
  ChessBoardInfoReq::default_instance_ = new ChessBoardInfoReq();
  ChessBoardInfo::default_instance_ = new ChessBoardInfo();
  HallInfoReq::default_instance_ = new HallInfoReq();
  HallInfo::default_instance_ = new HallInfo();
  GameHallSumaryReq::default_instance_ = new GameHallSumaryReq();
  GameHallSumary::default_instance_ = new GameHallSumary();
  RequestPlay::default_instance_ = new RequestPlay();
  RequestPlayReply::default_instance_ = new RequestPlayReply();
  MoveChess::default_instance_ = new MoveChess();
  MoveAction::default_instance_ = new MoveAction();
  UserMessage::default_instance_ = new UserMessage();
  SystemMessage::default_instance_ = new SystemMessage();
  Reconciled::default_instance_ = new Reconciled();
  GiveUp::default_instance_ = new GiveUp();
  Undo::default_instance_ = new Undo();
  GameReadyReq::default_instance_ = new GameReadyReq();
  GameStatusReply::default_instance_ = new GameStatusReply();
  FindPassword::default_instance_ = new FindPassword();
  UpdateUserInfo::default_instance_ = new UpdateUserInfo();
  Echo::default_instance_->InitAsDefaultInstance();
  LogOnorOut::default_instance_->InitAsDefaultInstance();
  ReplyStatus::default_instance_->InitAsDefaultInstance();
  Register::default_instance_->InitAsDefaultInstance();
  ChessBoardUser::default_instance_->InitAsDefaultInstance();
  ChessBoardInfoReq::default_instance_->InitAsDefaultInstance();
  ChessBoardInfo::default_instance_->InitAsDefaultInstance();
  HallInfoReq::default_instance_->InitAsDefaultInstance();
  HallInfo::default_instance_->InitAsDefaultInstance();
  GameHallSumaryReq::default_instance_->InitAsDefaultInstance();
  GameHallSumary::default_instance_->InitAsDefaultInstance();
  RequestPlay::default_instance_->InitAsDefaultInstance();
  RequestPlayReply::default_instance_->InitAsDefaultInstance();
  MoveChess::default_instance_->InitAsDefaultInstance();
  MoveAction::default_instance_->InitAsDefaultInstance();
  UserMessage::default_instance_->InitAsDefaultInstance();
  SystemMessage::default_instance_->InitAsDefaultInstance();
  Reconciled::default_instance_->InitAsDefaultInstance();
  GiveUp::default_instance_->InitAsDefaultInstance();
  Undo::default_instance_->InitAsDefaultInstance();
  GameReadyReq::default_instance_->InitAsDefaultInstance();
  GameStatusReply::default_instance_->InitAsDefaultInstance();
  FindPassword::default_instance_->InitAsDefaultInstance();
  UpdateUserInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Echo::kTimeStampFieldNumber;
#endif  // !_MSC_VER

Echo::Echo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Echo::InitAsDefaultInstance() {
}

Echo::Echo(const Echo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Echo::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Echo::~Echo() {
  SharedDtor();
}

void Echo::SharedDtor() {
  if (time_stamp_ != &::google::protobuf::internal::kEmptyString) {
    delete time_stamp_;
  }
  if (this != default_instance_) {
  }
}

void Echo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Echo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Echo_descriptor_;
}

const Echo& Echo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

Echo* Echo::default_instance_ = NULL;

Echo* Echo::New() const {
  return new Echo;
}

void Echo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_time_stamp()) {
      if (time_stamp_ != &::google::protobuf::internal::kEmptyString) {
        time_stamp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Echo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string time_stamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_stamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time_stamp().data(), this->time_stamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Echo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string time_stamp = 1;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_stamp().data(), this->time_stamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->time_stamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Echo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string time_stamp = 1;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_stamp().data(), this->time_stamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->time_stamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Echo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string time_stamp = 1;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_stamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Echo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Echo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Echo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Echo::MergeFrom(const Echo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Echo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Echo::CopyFrom(const Echo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Echo::IsInitialized() const {
  
  return true;
}

void Echo::Swap(Echo* other) {
  if (other != this) {
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Echo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Echo_descriptor_;
  metadata.reflection = Echo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogOnorOut::kAccountFieldNumber;
const int LogOnorOut::kPasswordFieldNumber;
#endif  // !_MSC_VER

LogOnorOut::LogOnorOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogOnorOut::InitAsDefaultInstance() {
}

LogOnorOut::LogOnorOut(const LogOnorOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogOnorOut::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogOnorOut::~LogOnorOut() {
  SharedDtor();
}

void LogOnorOut::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void LogOnorOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogOnorOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogOnorOut_descriptor_;
}

const LogOnorOut& LogOnorOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

LogOnorOut* LogOnorOut::default_instance_ = NULL;

LogOnorOut* LogOnorOut::New() const {
  return new LogOnorOut;
}

void LogOnorOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogOnorOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogOnorOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogOnorOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogOnorOut::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogOnorOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogOnorOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogOnorOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogOnorOut::MergeFrom(const LogOnorOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogOnorOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogOnorOut::CopyFrom(const LogOnorOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogOnorOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LogOnorOut::Swap(LogOnorOut* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogOnorOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogOnorOut_descriptor_;
  metadata.reflection = LogOnorOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyStatus::kStatusFieldNumber;
const int ReplyStatus::kUserFieldNumber;
#endif  // !_MSC_VER

ReplyStatus::ReplyStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyStatus::InitAsDefaultInstance() {
  user_ = const_cast< ::MessageStruct::ChessBoardUser*>(&::MessageStruct::ChessBoardUser::default_instance());
}

ReplyStatus::ReplyStatus(const ReplyStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyStatus::~ReplyStatus() {
  SharedDtor();
}

void ReplyStatus::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void ReplyStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyStatus_descriptor_;
}

const ReplyStatus& ReplyStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ReplyStatus* ReplyStatus::default_instance_ = NULL;

ReplyStatus* ReplyStatus::New() const {
  return new ReplyStatus;
}

void ReplyStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
    if (has_user()) {
      if (user_ != NULL) user_->::MessageStruct::ChessBoardUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // optional .MessageStruct.ChessBoardUser user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }
  
  // optional .MessageStruct.ChessBoardUser user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }
  
  // optional .MessageStruct.ChessBoardUser user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
    // optional .MessageStruct.ChessBoardUser user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyStatus::MergeFrom(const ReplyStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_user()) {
      mutable_user()->::MessageStruct::ChessBoardUser::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyStatus::CopyFrom(const ReplyStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void ReplyStatus::Swap(ReplyStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyStatus_descriptor_;
  metadata.reflection = ReplyStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Register::kEmailAccountFieldNumber;
const int Register::kPasswordFieldNumber;
const int Register::kUsernameFieldNumber;
#endif  // !_MSC_VER

Register::Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Register::InitAsDefaultInstance() {
}

Register::Register(const Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Register::SharedCtor() {
  _cached_size_ = 0;
  email_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Register::~Register() {
  SharedDtor();
}

void Register::SharedDtor() {
  if (email_account_ != &::google::protobuf::internal::kEmptyString) {
    delete email_account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Register_descriptor_;
}

const Register& Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

Register* Register::default_instance_ = NULL;

Register* Register::New() const {
  return new Register;
}

void Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_email_account()) {
      if (email_account_ != &::google::protobuf::internal::kEmptyString) {
        email_account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string email_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email_account().data(), this->email_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }
      
      // optional string username = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string email_account = 1;
  if (has_email_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email_account().data(), this->email_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->email_account(), output);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string email_account = 1;
  if (has_email_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email_account().data(), this->email_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->email_account(), target);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Register::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string email_account = 1;
    if (has_email_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email_account());
    }
    
    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Register::MergeFrom(const Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email_account()) {
      set_email_account(from.email_account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Register::CopyFrom(const Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Register::Swap(Register* other) {
  if (other != this) {
    std::swap(email_account_, other->email_account_);
    std::swap(password_, other->password_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Register_descriptor_;
  metadata.reflection = Register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChessBoardUser::kChessBoardEmptyFieldNumber;
const int ChessBoardUser::kUserNameFieldNumber;
const int ChessBoardUser::kAccountFieldNumber;
const int ChessBoardUser::kScoreFieldNumber;
const int ChessBoardUser::kExEmailFieldNumber;
const int ChessBoardUser::kPhoneFieldNumber;
const int ChessBoardUser::kHeadImageFieldNumber;
const int ChessBoardUser::kStatusFieldNumber;
#endif  // !_MSC_VER

ChessBoardUser::ChessBoardUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChessBoardUser::InitAsDefaultInstance() {
}

ChessBoardUser::ChessBoardUser(const ChessBoardUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChessBoardUser::SharedCtor() {
  _cached_size_ = 0;
  chess_board_empty_ = false;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  ex_email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChessBoardUser::~ChessBoardUser() {
  SharedDtor();
}

void ChessBoardUser::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (ex_email_ != &::google::protobuf::internal::kEmptyString) {
    delete ex_email_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (head_image_ != &::google::protobuf::internal::kEmptyString) {
    delete head_image_;
  }
  if (this != default_instance_) {
  }
}

void ChessBoardUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessBoardUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChessBoardUser_descriptor_;
}

const ChessBoardUser& ChessBoardUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ChessBoardUser* ChessBoardUser::default_instance_ = NULL;

ChessBoardUser* ChessBoardUser::New() const {
  return new ChessBoardUser;
}

void ChessBoardUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chess_board_empty_ = false;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    score_ = 0;
    if (has_ex_email()) {
      if (ex_email_ != &::google::protobuf::internal::kEmptyString) {
        ex_email_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_head_image()) {
      if (head_image_ != &::google::protobuf::internal::kEmptyString) {
        head_image_->clear();
      }
    }
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChessBoardUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool chess_board_empty = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chess_board_empty_)));
          set_has_chess_board_empty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }
      
      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }
      
      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }
      
      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ex_email;
        break;
      }
      
      // optional string ex_email = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ex_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ex_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ex_email().data(), this->ex_email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_phone;
        break;
      }
      
      // optional string phone = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_head_image;
        break;
      }
      
      // optional bytes head_image = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChessBoardUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool chess_board_empty = 1;
  if (has_chess_board_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->chess_board_empty(), output);
  }
  
  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }
  
  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }
  
  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }
  
  // optional string ex_email = 5;
  if (has_ex_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ex_email().data(), this->ex_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ex_email(), output);
  }
  
  // optional string phone = 6;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->phone(), output);
  }
  
  // optional bytes head_image = 7;
  if (has_head_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->head_image(), output);
  }
  
  // optional uint32 status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChessBoardUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool chess_board_empty = 1;
  if (has_chess_board_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->chess_board_empty(), target);
  }
  
  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }
  
  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }
  
  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }
  
  // optional string ex_email = 5;
  if (has_ex_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ex_email().data(), this->ex_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ex_email(), target);
  }
  
  // optional string phone = 6;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->phone(), target);
  }
  
  // optional bytes head_image = 7;
  if (has_head_image()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->head_image(), target);
  }
  
  // optional uint32 status = 8;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChessBoardUser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool chess_board_empty = 1;
    if (has_chess_board_empty()) {
      total_size += 1 + 1;
    }
    
    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // optional string ex_email = 5;
    if (has_ex_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ex_email());
    }
    
    // optional string phone = 6;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }
    
    // optional bytes head_image = 7;
    if (has_head_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->head_image());
    }
    
    // optional uint32 status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessBoardUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChessBoardUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChessBoardUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChessBoardUser::MergeFrom(const ChessBoardUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chess_board_empty()) {
      set_chess_board_empty(from.chess_board_empty());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_ex_email()) {
      set_ex_email(from.ex_email());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_head_image()) {
      set_head_image(from.head_image());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChessBoardUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessBoardUser::CopyFrom(const ChessBoardUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessBoardUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ChessBoardUser::Swap(ChessBoardUser* other) {
  if (other != this) {
    std::swap(chess_board_empty_, other->chess_board_empty_);
    std::swap(user_name_, other->user_name_);
    std::swap(account_, other->account_);
    std::swap(score_, other->score_);
    std::swap(ex_email_, other->ex_email_);
    std::swap(phone_, other->phone_);
    std::swap(head_image_, other->head_image_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChessBoardUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChessBoardUser_descriptor_;
  metadata.reflection = ChessBoardUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChessBoardInfoReq::kChessBoardIdFieldNumber;
const int ChessBoardInfoReq::kOpcodeFieldNumber;
#endif  // !_MSC_VER

ChessBoardInfoReq::ChessBoardInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChessBoardInfoReq::InitAsDefaultInstance() {
}

ChessBoardInfoReq::ChessBoardInfoReq(const ChessBoardInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChessBoardInfoReq::SharedCtor() {
  _cached_size_ = 0;
  chess_board_id_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChessBoardInfoReq::~ChessBoardInfoReq() {
  SharedDtor();
}

void ChessBoardInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChessBoardInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessBoardInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChessBoardInfoReq_descriptor_;
}

const ChessBoardInfoReq& ChessBoardInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ChessBoardInfoReq* ChessBoardInfoReq::default_instance_ = NULL;

ChessBoardInfoReq* ChessBoardInfoReq::New() const {
  return new ChessBoardInfoReq;
}

void ChessBoardInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chess_board_id_ = 0;
    opcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChessBoardInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chess_board_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chess_board_id_)));
          set_has_chess_board_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opcode;
        break;
      }
      
      // optional int32 opcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChessBoardInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chess_board_id = 1;
  if (has_chess_board_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chess_board_id(), output);
  }
  
  // optional int32 opcode = 2;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChessBoardInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chess_board_id = 1;
  if (has_chess_board_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chess_board_id(), target);
  }
  
  // optional int32 opcode = 2;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChessBoardInfoReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chess_board_id = 1;
    if (has_chess_board_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chess_board_id());
    }
    
    // optional int32 opcode = 2;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessBoardInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChessBoardInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChessBoardInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChessBoardInfoReq::MergeFrom(const ChessBoardInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chess_board_id()) {
      set_chess_board_id(from.chess_board_id());
    }
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChessBoardInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessBoardInfoReq::CopyFrom(const ChessBoardInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessBoardInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ChessBoardInfoReq::Swap(ChessBoardInfoReq* other) {
  if (other != this) {
    std::swap(chess_board_id_, other->chess_board_id_);
    std::swap(opcode_, other->opcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChessBoardInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChessBoardInfoReq_descriptor_;
  metadata.reflection = ChessBoardInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChessBoardInfo::kIdFieldNumber;
const int ChessBoardInfo::kPeopleNumFieldNumber;
const int ChessBoardInfo::kLeftUserFieldNumber;
const int ChessBoardInfo::kRightUserFieldNumber;
const int ChessBoardInfo::kBottomUserFieldNumber;
#endif  // !_MSC_VER

ChessBoardInfo::ChessBoardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChessBoardInfo::InitAsDefaultInstance() {
  left_user_ = const_cast< ::MessageStruct::ChessBoardUser*>(&::MessageStruct::ChessBoardUser::default_instance());
  right_user_ = const_cast< ::MessageStruct::ChessBoardUser*>(&::MessageStruct::ChessBoardUser::default_instance());
  bottom_user_ = const_cast< ::MessageStruct::ChessBoardUser*>(&::MessageStruct::ChessBoardUser::default_instance());
}

ChessBoardInfo::ChessBoardInfo(const ChessBoardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChessBoardInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  people_num_ = 0u;
  left_user_ = NULL;
  right_user_ = NULL;
  bottom_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChessBoardInfo::~ChessBoardInfo() {
  SharedDtor();
}

void ChessBoardInfo::SharedDtor() {
  if (this != default_instance_) {
    delete left_user_;
    delete right_user_;
    delete bottom_user_;
  }
}

void ChessBoardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChessBoardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChessBoardInfo_descriptor_;
}

const ChessBoardInfo& ChessBoardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

ChessBoardInfo* ChessBoardInfo::default_instance_ = NULL;

ChessBoardInfo* ChessBoardInfo::New() const {
  return new ChessBoardInfo;
}

void ChessBoardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    people_num_ = 0u;
    if (has_left_user()) {
      if (left_user_ != NULL) left_user_->::MessageStruct::ChessBoardUser::Clear();
    }
    if (has_right_user()) {
      if (right_user_ != NULL) right_user_->::MessageStruct::ChessBoardUser::Clear();
    }
    if (has_bottom_user()) {
      if (bottom_user_ != NULL) bottom_user_->::MessageStruct::ChessBoardUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChessBoardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_people_num;
        break;
      }
      
      // required uint32 people_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_people_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &people_num_)));
          set_has_people_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_left_user;
        break;
      }
      
      // required .MessageStruct.ChessBoardUser left_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_right_user;
        break;
      }
      
      // required .MessageStruct.ChessBoardUser right_user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bottom_user;
        break;
      }
      
      // required .MessageStruct.ChessBoardUser bottom_user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bottom_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottom_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChessBoardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 people_num = 2;
  if (has_people_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->people_num(), output);
  }
  
  // required .MessageStruct.ChessBoardUser left_user = 3;
  if (has_left_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->left_user(), output);
  }
  
  // required .MessageStruct.ChessBoardUser right_user = 4;
  if (has_right_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->right_user(), output);
  }
  
  // required .MessageStruct.ChessBoardUser bottom_user = 5;
  if (has_bottom_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bottom_user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChessBoardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 people_num = 2;
  if (has_people_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->people_num(), target);
  }
  
  // required .MessageStruct.ChessBoardUser left_user = 3;
  if (has_left_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->left_user(), target);
  }
  
  // required .MessageStruct.ChessBoardUser right_user = 4;
  if (has_right_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->right_user(), target);
  }
  
  // required .MessageStruct.ChessBoardUser bottom_user = 5;
  if (has_bottom_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bottom_user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChessBoardInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 people_num = 2;
    if (has_people_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->people_num());
    }
    
    // required .MessageStruct.ChessBoardUser left_user = 3;
    if (has_left_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_user());
    }
    
    // required .MessageStruct.ChessBoardUser right_user = 4;
    if (has_right_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_user());
    }
    
    // required .MessageStruct.ChessBoardUser bottom_user = 5;
    if (has_bottom_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_user());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChessBoardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChessBoardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChessBoardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChessBoardInfo::MergeFrom(const ChessBoardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_people_num()) {
      set_people_num(from.people_num());
    }
    if (from.has_left_user()) {
      mutable_left_user()->::MessageStruct::ChessBoardUser::MergeFrom(from.left_user());
    }
    if (from.has_right_user()) {
      mutable_right_user()->::MessageStruct::ChessBoardUser::MergeFrom(from.right_user());
    }
    if (from.has_bottom_user()) {
      mutable_bottom_user()->::MessageStruct::ChessBoardUser::MergeFrom(from.bottom_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChessBoardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessBoardInfo::CopyFrom(const ChessBoardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessBoardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_left_user()) {
    if (!this->left_user().IsInitialized()) return false;
  }
  if (has_right_user()) {
    if (!this->right_user().IsInitialized()) return false;
  }
  if (has_bottom_user()) {
    if (!this->bottom_user().IsInitialized()) return false;
  }
  return true;
}

void ChessBoardInfo::Swap(ChessBoardInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(people_num_, other->people_num_);
    std::swap(left_user_, other->left_user_);
    std::swap(right_user_, other->right_user_);
    std::swap(bottom_user_, other->bottom_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChessBoardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChessBoardInfo_descriptor_;
  metadata.reflection = ChessBoardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HallInfoReq::kGameHallIdFieldNumber;
const int HallInfoReq::kOpcodeFieldNumber;
#endif  // !_MSC_VER

HallInfoReq::HallInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HallInfoReq::InitAsDefaultInstance() {
}

HallInfoReq::HallInfoReq(const HallInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HallInfoReq::SharedCtor() {
  _cached_size_ = 0;
  game_hall_id_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HallInfoReq::~HallInfoReq() {
  SharedDtor();
}

void HallInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HallInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HallInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HallInfoReq_descriptor_;
}

const HallInfoReq& HallInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

HallInfoReq* HallInfoReq::default_instance_ = NULL;

HallInfoReq* HallInfoReq::New() const {
  return new HallInfoReq;
}

void HallInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_hall_id_ = 0;
    opcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HallInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 game_hall_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_hall_id_)));
          set_has_game_hall_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opcode;
        break;
      }
      
      // optional int32 opcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HallInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 game_hall_id = 1;
  if (has_game_hall_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_hall_id(), output);
  }
  
  // optional int32 opcode = 2;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HallInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 game_hall_id = 1;
  if (has_game_hall_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_hall_id(), target);
  }
  
  // optional int32 opcode = 2;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HallInfoReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 game_hall_id = 1;
    if (has_game_hall_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_hall_id());
    }
    
    // optional int32 opcode = 2;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HallInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HallInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HallInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HallInfoReq::MergeFrom(const HallInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_hall_id()) {
      set_game_hall_id(from.game_hall_id());
    }
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HallInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HallInfoReq::CopyFrom(const HallInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void HallInfoReq::Swap(HallInfoReq* other) {
  if (other != this) {
    std::swap(game_hall_id_, other->game_hall_id_);
    std::swap(opcode_, other->opcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HallInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HallInfoReq_descriptor_;
  metadata.reflection = HallInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HallInfo::kGameHallIdFieldNumber;
const int HallInfo::kTotalPeopleFieldNumber;
const int HallInfo::kCurrPeopleFieldNumber;
const int HallInfo::kTotalChessboardFieldNumber;
const int HallInfo::kChessBoardFieldNumber;
#endif  // !_MSC_VER

HallInfo::HallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HallInfo::InitAsDefaultInstance() {
}

HallInfo::HallInfo(const HallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HallInfo::SharedCtor() {
  _cached_size_ = 0;
  game_hall_id_ = 0;
  total_people_ = 0u;
  curr_people_ = 0u;
  total_chessboard_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HallInfo::~HallInfo() {
  SharedDtor();
}

void HallInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HallInfo_descriptor_;
}

const HallInfo& HallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

HallInfo* HallInfo::default_instance_ = NULL;

HallInfo* HallInfo::New() const {
  return new HallInfo;
}

void HallInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_hall_id_ = 0;
    total_people_ = 0u;
    curr_people_ = 0u;
    total_chessboard_ = 0u;
  }
  chess_board_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 game_hall_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_hall_id_)));
          set_has_game_hall_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_people;
        break;
      }
      
      // required uint32 total_people = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_people:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_people_)));
          set_has_total_people();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curr_people;
        break;
      }
      
      // required uint32 curr_people = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curr_people:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curr_people_)));
          set_has_curr_people();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_chessboard;
        break;
      }
      
      // optional uint32 total_chessboard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_chessboard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_chessboard_)));
          set_has_total_chessboard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_chess_board;
        break;
      }
      
      // repeated .MessageStruct.ChessBoardInfo chess_board = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chess_board:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chess_board()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_chess_board;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 game_hall_id = 1;
  if (has_game_hall_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_hall_id(), output);
  }
  
  // required uint32 total_people = 2;
  if (has_total_people()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_people(), output);
  }
  
  // required uint32 curr_people = 3;
  if (has_curr_people()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curr_people(), output);
  }
  
  // optional uint32 total_chessboard = 4;
  if (has_total_chessboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_chessboard(), output);
  }
  
  // repeated .MessageStruct.ChessBoardInfo chess_board = 5;
  for (int i = 0; i < this->chess_board_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->chess_board(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 game_hall_id = 1;
  if (has_game_hall_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_hall_id(), target);
  }
  
  // required uint32 total_people = 2;
  if (has_total_people()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_people(), target);
  }
  
  // required uint32 curr_people = 3;
  if (has_curr_people()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curr_people(), target);
  }
  
  // optional uint32 total_chessboard = 4;
  if (has_total_chessboard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_chessboard(), target);
  }
  
  // repeated .MessageStruct.ChessBoardInfo chess_board = 5;
  for (int i = 0; i < this->chess_board_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->chess_board(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HallInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 game_hall_id = 1;
    if (has_game_hall_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_hall_id());
    }
    
    // required uint32 total_people = 2;
    if (has_total_people()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_people());
    }
    
    // required uint32 curr_people = 3;
    if (has_curr_people()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curr_people());
    }
    
    // optional uint32 total_chessboard = 4;
    if (has_total_chessboard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_chessboard());
    }
    
  }
  // repeated .MessageStruct.ChessBoardInfo chess_board = 5;
  total_size += 1 * this->chess_board_size();
  for (int i = 0; i < this->chess_board_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chess_board(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HallInfo::MergeFrom(const HallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  chess_board_.MergeFrom(from.chess_board_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_hall_id()) {
      set_game_hall_id(from.game_hall_id());
    }
    if (from.has_total_people()) {
      set_total_people(from.total_people());
    }
    if (from.has_curr_people()) {
      set_curr_people(from.curr_people());
    }
    if (from.has_total_chessboard()) {
      set_total_chessboard(from.total_chessboard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HallInfo::CopyFrom(const HallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < chess_board_size(); i++) {
    if (!this->chess_board(i).IsInitialized()) return false;
  }
  return true;
}

void HallInfo::Swap(HallInfo* other) {
  if (other != this) {
    std::swap(game_hall_id_, other->game_hall_id_);
    std::swap(total_people_, other->total_people_);
    std::swap(curr_people_, other->curr_people_);
    std::swap(total_chessboard_, other->total_chessboard_);
    chess_board_.Swap(&other->chess_board_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HallInfo_descriptor_;
  metadata.reflection = HallInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameHallSumaryReq::kOpcodeFieldNumber;
#endif  // !_MSC_VER

GameHallSumaryReq::GameHallSumaryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameHallSumaryReq::InitAsDefaultInstance() {
}

GameHallSumaryReq::GameHallSumaryReq(const GameHallSumaryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameHallSumaryReq::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameHallSumaryReq::~GameHallSumaryReq() {
  SharedDtor();
}

void GameHallSumaryReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameHallSumaryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameHallSumaryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameHallSumaryReq_descriptor_;
}

const GameHallSumaryReq& GameHallSumaryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GameHallSumaryReq* GameHallSumaryReq::default_instance_ = NULL;

GameHallSumaryReq* GameHallSumaryReq::New() const {
  return new GameHallSumaryReq;
}

void GameHallSumaryReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameHallSumaryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameHallSumaryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameHallSumaryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameHallSumaryReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameHallSumaryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameHallSumaryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameHallSumaryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameHallSumaryReq::MergeFrom(const GameHallSumaryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameHallSumaryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameHallSumaryReq::CopyFrom(const GameHallSumaryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameHallSumaryReq::IsInitialized() const {
  
  return true;
}

void GameHallSumaryReq::Swap(GameHallSumaryReq* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameHallSumaryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameHallSumaryReq_descriptor_;
  metadata.reflection = GameHallSumaryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameHallSumary::kAccountFieldNumber;
const int GameHallSumary::kUsernameFieldNumber;
const int GameHallSumary::kScoreFieldNumber;
const int GameHallSumary::kHallNumFieldNumber;
const int GameHallSumary::kHeadPictureFieldNumber;
const int GameHallSumary::kAdPicture1FieldNumber;
const int GameHallSumary::kAdPicture2FieldNumber;
const int GameHallSumary::kHallInfoFieldNumber;
#endif  // !_MSC_VER

GameHallSumary::GameHallSumary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameHallSumary::InitAsDefaultInstance() {
}

GameHallSumary::GameHallSumary(const GameHallSumary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameHallSumary::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  hall_num_ = 0u;
  head_picture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ad_picture1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ad_picture2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameHallSumary::~GameHallSumary() {
  SharedDtor();
}

void GameHallSumary::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (head_picture_ != &::google::protobuf::internal::kEmptyString) {
    delete head_picture_;
  }
  if (ad_picture1_ != &::google::protobuf::internal::kEmptyString) {
    delete ad_picture1_;
  }
  if (ad_picture2_ != &::google::protobuf::internal::kEmptyString) {
    delete ad_picture2_;
  }
  if (this != default_instance_) {
  }
}

void GameHallSumary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameHallSumary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameHallSumary_descriptor_;
}

const GameHallSumary& GameHallSumary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GameHallSumary* GameHallSumary::default_instance_ = NULL;

GameHallSumary* GameHallSumary::New() const {
  return new GameHallSumary;
}

void GameHallSumary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    score_ = 0;
    hall_num_ = 0u;
    if (has_head_picture()) {
      if (head_picture_ != &::google::protobuf::internal::kEmptyString) {
        head_picture_->clear();
      }
    }
    if (has_ad_picture1()) {
      if (ad_picture1_ != &::google::protobuf::internal::kEmptyString) {
        ad_picture1_->clear();
      }
    }
    if (has_ad_picture2()) {
      if (ad_picture2_ != &::google::protobuf::internal::kEmptyString) {
        ad_picture2_->clear();
      }
    }
  }
  hall_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameHallSumary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // required string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }
      
      // required int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hall_num;
        break;
      }
      
      // required uint32 hall_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hall_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hall_num_)));
          set_has_hall_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_head_picture;
        break;
      }
      
      // required string head_picture = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_picture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head_picture()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head_picture().data(), this->head_picture().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ad_picture1;
        break;
      }
      
      // required string ad_picture1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ad_picture1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ad_picture1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ad_picture1().data(), this->ad_picture1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ad_picture2;
        break;
      }
      
      // optional string ad_picture2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ad_picture2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ad_picture2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ad_picture2().data(), this->ad_picture2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_hall_info;
        break;
      }
      
      // repeated .MessageStruct.HallInfo hall_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hall_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hall_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_hall_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameHallSumary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }
  
  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // required int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }
  
  // required uint32 hall_num = 4;
  if (has_hall_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hall_num(), output);
  }
  
  // required string head_picture = 5;
  if (has_head_picture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_picture().data(), this->head_picture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->head_picture(), output);
  }
  
  // required string ad_picture1 = 6;
  if (has_ad_picture1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ad_picture1().data(), this->ad_picture1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ad_picture1(), output);
  }
  
  // optional string ad_picture2 = 7;
  if (has_ad_picture2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ad_picture2().data(), this->ad_picture2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ad_picture2(), output);
  }
  
  // repeated .MessageStruct.HallInfo hall_info = 8;
  for (int i = 0; i < this->hall_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->hall_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameHallSumary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }
  
  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // required int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }
  
  // required uint32 hall_num = 4;
  if (has_hall_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hall_num(), target);
  }
  
  // required string head_picture = 5;
  if (has_head_picture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head_picture().data(), this->head_picture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->head_picture(), target);
  }
  
  // required string ad_picture1 = 6;
  if (has_ad_picture1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ad_picture1().data(), this->ad_picture1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ad_picture1(), target);
  }
  
  // optional string ad_picture2 = 7;
  if (has_ad_picture2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ad_picture2().data(), this->ad_picture2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ad_picture2(), target);
  }
  
  // repeated .MessageStruct.HallInfo hall_info = 8;
  for (int i = 0; i < this->hall_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->hall_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameHallSumary::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // required string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // required uint32 hall_num = 4;
    if (has_hall_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hall_num());
    }
    
    // required string head_picture = 5;
    if (has_head_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head_picture());
    }
    
    // required string ad_picture1 = 6;
    if (has_ad_picture1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ad_picture1());
    }
    
    // optional string ad_picture2 = 7;
    if (has_ad_picture2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ad_picture2());
    }
    
  }
  // repeated .MessageStruct.HallInfo hall_info = 8;
  total_size += 1 * this->hall_info_size();
  for (int i = 0; i < this->hall_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hall_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameHallSumary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameHallSumary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameHallSumary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameHallSumary::MergeFrom(const GameHallSumary& from) {
  GOOGLE_CHECK_NE(&from, this);
  hall_info_.MergeFrom(from.hall_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_hall_num()) {
      set_hall_num(from.hall_num());
    }
    if (from.has_head_picture()) {
      set_head_picture(from.head_picture());
    }
    if (from.has_ad_picture1()) {
      set_ad_picture1(from.ad_picture1());
    }
    if (from.has_ad_picture2()) {
      set_ad_picture2(from.ad_picture2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameHallSumary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameHallSumary::CopyFrom(const GameHallSumary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameHallSumary::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  for (int i = 0; i < hall_info_size(); i++) {
    if (!this->hall_info(i).IsInitialized()) return false;
  }
  return true;
}

void GameHallSumary::Swap(GameHallSumary* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(username_, other->username_);
    std::swap(score_, other->score_);
    std::swap(hall_num_, other->hall_num_);
    std::swap(head_picture_, other->head_picture_);
    std::swap(ad_picture1_, other->ad_picture1_);
    std::swap(ad_picture2_, other->ad_picture2_);
    hall_info_.Swap(&other->hall_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameHallSumary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameHallSumary_descriptor_;
  metadata.reflection = GameHallSumary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPlay::kGameHallIdFieldNumber;
const int RequestPlay::kChessBoardIdFieldNumber;
const int RequestPlay::kLocateFieldNumber;
#endif  // !_MSC_VER

RequestPlay::RequestPlay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPlay::InitAsDefaultInstance() {
}

RequestPlay::RequestPlay(const RequestPlay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPlay::SharedCtor() {
  _cached_size_ = 0;
  game_hall_id_ = 0;
  chess_board_id_ = 0;
  locate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPlay::~RequestPlay() {
  SharedDtor();
}

void RequestPlay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestPlay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPlay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPlay_descriptor_;
}

const RequestPlay& RequestPlay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

RequestPlay* RequestPlay::default_instance_ = NULL;

RequestPlay* RequestPlay::New() const {
  return new RequestPlay;
}

void RequestPlay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_hall_id_ = 0;
    chess_board_id_ = 0;
    locate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPlay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 game_hall_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_hall_id_)));
          set_has_game_hall_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chess_board_id;
        break;
      }
      
      // required int32 chess_board_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chess_board_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chess_board_id_)));
          set_has_chess_board_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_locate;
        break;
      }
      
      // required int32 locate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locate_)));
          set_has_locate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPlay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 game_hall_id = 1;
  if (has_game_hall_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_hall_id(), output);
  }
  
  // required int32 chess_board_id = 2;
  if (has_chess_board_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chess_board_id(), output);
  }
  
  // required int32 locate = 3;
  if (has_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->locate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPlay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 game_hall_id = 1;
  if (has_game_hall_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_hall_id(), target);
  }
  
  // required int32 chess_board_id = 2;
  if (has_chess_board_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chess_board_id(), target);
  }
  
  // required int32 locate = 3;
  if (has_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->locate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPlay::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 game_hall_id = 1;
    if (has_game_hall_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_hall_id());
    }
    
    // required int32 chess_board_id = 2;
    if (has_chess_board_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chess_board_id());
    }
    
    // required int32 locate = 3;
    if (has_locate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPlay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPlay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPlay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPlay::MergeFrom(const RequestPlay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_hall_id()) {
      set_game_hall_id(from.game_hall_id());
    }
    if (from.has_chess_board_id()) {
      set_chess_board_id(from.chess_board_id());
    }
    if (from.has_locate()) {
      set_locate(from.locate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPlay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPlay::CopyFrom(const RequestPlay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPlay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RequestPlay::Swap(RequestPlay* other) {
  if (other != this) {
    std::swap(game_hall_id_, other->game_hall_id_);
    std::swap(chess_board_id_, other->chess_board_id_);
    std::swap(locate_, other->locate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPlay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPlay_descriptor_;
  metadata.reflection = RequestPlay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPlayReply::kStatusFieldNumber;
const int RequestPlayReply::kFirstComeUserLocateFieldNumber;
const int RequestPlayReply::kChessBoardFieldNumber;
#endif  // !_MSC_VER

RequestPlayReply::RequestPlayReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPlayReply::InitAsDefaultInstance() {
  chessboard_ = const_cast< ::MessageStruct::ChessBoardInfo*>(&::MessageStruct::ChessBoardInfo::default_instance());
}

RequestPlayReply::RequestPlayReply(const RequestPlayReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPlayReply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  first_come_user_locate_ = 0u;
  chessboard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPlayReply::~RequestPlayReply() {
  SharedDtor();
}

void RequestPlayReply::SharedDtor() {
  if (this != default_instance_) {
    delete chessboard_;
  }
}

void RequestPlayReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPlayReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPlayReply_descriptor_;
}

const RequestPlayReply& RequestPlayReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

RequestPlayReply* RequestPlayReply::default_instance_ = NULL;

RequestPlayReply* RequestPlayReply::New() const {
  return new RequestPlayReply;
}

void RequestPlayReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    first_come_user_locate_ = 0u;
    if (has_chessboard()) {
      if (chessboard_ != NULL) chessboard_->::MessageStruct::ChessBoardInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPlayReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_come_user_locate;
        break;
      }
      
      // required uint32 first_come_user_locate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_come_user_locate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_come_user_locate_)));
          set_has_first_come_user_locate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chessBoard;
        break;
      }
      
      // optional .MessageStruct.ChessBoardInfo chessBoard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chessBoard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chessboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPlayReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }
  
  // required uint32 first_come_user_locate = 2;
  if (has_first_come_user_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->first_come_user_locate(), output);
  }
  
  // optional .MessageStruct.ChessBoardInfo chessBoard = 3;
  if (has_chessboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chessboard(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPlayReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }
  
  // required uint32 first_come_user_locate = 2;
  if (has_first_come_user_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->first_come_user_locate(), target);
  }
  
  // optional .MessageStruct.ChessBoardInfo chessBoard = 3;
  if (has_chessboard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chessboard(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPlayReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required uint32 first_come_user_locate = 2;
    if (has_first_come_user_locate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_come_user_locate());
    }
    
    // optional .MessageStruct.ChessBoardInfo chessBoard = 3;
    if (has_chessboard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chessboard());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPlayReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPlayReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPlayReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPlayReply::MergeFrom(const RequestPlayReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_first_come_user_locate()) {
      set_first_come_user_locate(from.first_come_user_locate());
    }
    if (from.has_chessboard()) {
      mutable_chessboard()->::MessageStruct::ChessBoardInfo::MergeFrom(from.chessboard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPlayReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPlayReply::CopyFrom(const RequestPlayReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPlayReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_chessboard()) {
    if (!this->chessboard().IsInitialized()) return false;
  }
  return true;
}

void RequestPlayReply::Swap(RequestPlayReply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(first_come_user_locate_, other->first_come_user_locate_);
    std::swap(chessboard_, other->chessboard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPlayReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPlayReply_descriptor_;
  metadata.reflection = RequestPlayReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveChess::kSrcChessTypeFieldNumber;
const int MoveChess::kSrcUserLocateFieldNumber;
const int MoveChess::kFromPointXFieldNumber;
const int MoveChess::kFromPointYFieldNumber;
const int MoveChess::kDesPointXFieldNumber;
const int MoveChess::kDesPointYFieldNumber;
const int MoveChess::kIsWinnerFieldNumber;
const int MoveChess::kEatTargetChessTypeFieldNumber;
const int MoveChess::kTargetUserLocateFieldNumber;
#endif  // !_MSC_VER

MoveChess::MoveChess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveChess::InitAsDefaultInstance() {
}

MoveChess::MoveChess(const MoveChess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveChess::SharedCtor() {
  _cached_size_ = 0;
  src_chess_type_ = 0;
  src_user_locate_ = 0;
  from_pointx_ = 0;
  from_pointy_ = 0;
  des_pointx_ = 0;
  des_pointy_ = 0;
  is_winner_ = false;
  eat_target_chess_type_ = 0;
  target_user_locate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveChess::~MoveChess() {
  SharedDtor();
}

void MoveChess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveChess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveChess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveChess_descriptor_;
}

const MoveChess& MoveChess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

MoveChess* MoveChess::default_instance_ = NULL;

MoveChess* MoveChess::New() const {
  return new MoveChess;
}

void MoveChess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_chess_type_ = 0;
    src_user_locate_ = 0;
    from_pointx_ = 0;
    from_pointy_ = 0;
    des_pointx_ = 0;
    des_pointy_ = 0;
    is_winner_ = false;
    eat_target_chess_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    target_user_locate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveChess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 src_chess_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_chess_type_)));
          set_has_src_chess_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_user_locate;
        break;
      }
      
      // required int32 src_user_locate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_user_locate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_user_locate_)));
          set_has_src_user_locate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_pointX;
        break;
      }
      
      // required int32 from_pointX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_pointX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_pointx_)));
          set_has_from_pointx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_from_pointY;
        break;
      }
      
      // required int32 from_pointY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_pointY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_pointy_)));
          set_has_from_pointy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_des_pointX;
        break;
      }
      
      // required int32 des_pointX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_des_pointX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &des_pointx_)));
          set_has_des_pointx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_des_pointY;
        break;
      }
      
      // required int32 des_pointY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_des_pointY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &des_pointy_)));
          set_has_des_pointy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_winner;
        break;
      }
      
      // required bool is_winner = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_winner_)));
          set_has_is_winner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_eat_target_chess_type;
        break;
      }
      
      // optional int32 eat_target_chess_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eat_target_chess_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eat_target_chess_type_)));
          set_has_eat_target_chess_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_target_user_locate;
        break;
      }
      
      // optional uint32 target_user_locate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_user_locate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_user_locate_)));
          set_has_target_user_locate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveChess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 src_chess_type = 1;
  if (has_src_chess_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src_chess_type(), output);
  }
  
  // required int32 src_user_locate = 2;
  if (has_src_user_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->src_user_locate(), output);
  }
  
  // required int32 from_pointX = 3;
  if (has_from_pointx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->from_pointx(), output);
  }
  
  // required int32 from_pointY = 4;
  if (has_from_pointy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->from_pointy(), output);
  }
  
  // required int32 des_pointX = 5;
  if (has_des_pointx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->des_pointx(), output);
  }
  
  // required int32 des_pointY = 6;
  if (has_des_pointy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->des_pointy(), output);
  }
  
  // required bool is_winner = 7;
  if (has_is_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_winner(), output);
  }
  
  // optional int32 eat_target_chess_type = 8;
  if (has_eat_target_chess_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->eat_target_chess_type(), output);
  }
  
  // optional uint32 target_user_locate = 9;
  if (has_target_user_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->target_user_locate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveChess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 src_chess_type = 1;
  if (has_src_chess_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src_chess_type(), target);
  }
  
  // required int32 src_user_locate = 2;
  if (has_src_user_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->src_user_locate(), target);
  }
  
  // required int32 from_pointX = 3;
  if (has_from_pointx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->from_pointx(), target);
  }
  
  // required int32 from_pointY = 4;
  if (has_from_pointy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->from_pointy(), target);
  }
  
  // required int32 des_pointX = 5;
  if (has_des_pointx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->des_pointx(), target);
  }
  
  // required int32 des_pointY = 6;
  if (has_des_pointy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->des_pointy(), target);
  }
  
  // required bool is_winner = 7;
  if (has_is_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_winner(), target);
  }
  
  // optional int32 eat_target_chess_type = 8;
  if (has_eat_target_chess_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->eat_target_chess_type(), target);
  }
  
  // optional uint32 target_user_locate = 9;
  if (has_target_user_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->target_user_locate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveChess::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 src_chess_type = 1;
    if (has_src_chess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_chess_type());
    }
    
    // required int32 src_user_locate = 2;
    if (has_src_user_locate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_user_locate());
    }
    
    // required int32 from_pointX = 3;
    if (has_from_pointx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_pointx());
    }
    
    // required int32 from_pointY = 4;
    if (has_from_pointy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_pointy());
    }
    
    // required int32 des_pointX = 5;
    if (has_des_pointx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->des_pointx());
    }
    
    // required int32 des_pointY = 6;
    if (has_des_pointy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->des_pointy());
    }
    
    // required bool is_winner = 7;
    if (has_is_winner()) {
      total_size += 1 + 1;
    }
    
    // optional int32 eat_target_chess_type = 8;
    if (has_eat_target_chess_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eat_target_chess_type());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 target_user_locate = 9;
    if (has_target_user_locate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_user_locate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveChess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveChess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveChess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveChess::MergeFrom(const MoveChess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_chess_type()) {
      set_src_chess_type(from.src_chess_type());
    }
    if (from.has_src_user_locate()) {
      set_src_user_locate(from.src_user_locate());
    }
    if (from.has_from_pointx()) {
      set_from_pointx(from.from_pointx());
    }
    if (from.has_from_pointy()) {
      set_from_pointy(from.from_pointy());
    }
    if (from.has_des_pointx()) {
      set_des_pointx(from.des_pointx());
    }
    if (from.has_des_pointy()) {
      set_des_pointy(from.des_pointy());
    }
    if (from.has_is_winner()) {
      set_is_winner(from.is_winner());
    }
    if (from.has_eat_target_chess_type()) {
      set_eat_target_chess_type(from.eat_target_chess_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_target_user_locate()) {
      set_target_user_locate(from.target_user_locate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveChess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveChess::CopyFrom(const MoveChess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveChess::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void MoveChess::Swap(MoveChess* other) {
  if (other != this) {
    std::swap(src_chess_type_, other->src_chess_type_);
    std::swap(src_user_locate_, other->src_user_locate_);
    std::swap(from_pointx_, other->from_pointx_);
    std::swap(from_pointy_, other->from_pointy_);
    std::swap(des_pointx_, other->des_pointx_);
    std::swap(des_pointy_, other->des_pointy_);
    std::swap(is_winner_, other->is_winner_);
    std::swap(eat_target_chess_type_, other->eat_target_chess_type_);
    std::swap(target_user_locate_, other->target_user_locate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveChess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveChess_descriptor_;
  metadata.reflection = MoveChess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveAction::kSrcUserLocateFieldNumber;
const int MoveAction::kMovechessFieldNumber;
const int MoveAction::kTokenLocateFieldNumber;
#endif  // !_MSC_VER

MoveAction::MoveAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveAction::InitAsDefaultInstance() {
  movechess_ = const_cast< ::MessageStruct::MoveChess*>(&::MessageStruct::MoveChess::default_instance());
}

MoveAction::MoveAction(const MoveAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveAction::SharedCtor() {
  _cached_size_ = 0;
  src_user_locate_ = 0u;
  movechess_ = NULL;
  token_locate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveAction::~MoveAction() {
  SharedDtor();
}

void MoveAction::SharedDtor() {
  if (this != default_instance_) {
    delete movechess_;
  }
}

void MoveAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveAction_descriptor_;
}

const MoveAction& MoveAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

MoveAction* MoveAction::default_instance_ = NULL;

MoveAction* MoveAction::New() const {
  return new MoveAction;
}

void MoveAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_user_locate_ = 0u;
    if (has_movechess()) {
      if (movechess_ != NULL) movechess_->::MessageStruct::MoveChess::Clear();
    }
    token_locate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 src_user_locate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_user_locate_)));
          set_has_src_user_locate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_movechess;
        break;
      }
      
      // required .MessageStruct.MoveChess movechess = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movechess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movechess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_token_locate;
        break;
      }
      
      // required uint32 token_locate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_locate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_locate_)));
          set_has_token_locate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 src_user_locate = 1;
  if (has_src_user_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->src_user_locate(), output);
  }
  
  // required .MessageStruct.MoveChess movechess = 2;
  if (has_movechess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->movechess(), output);
  }
  
  // required uint32 token_locate = 3;
  if (has_token_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->token_locate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 src_user_locate = 1;
  if (has_src_user_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->src_user_locate(), target);
  }
  
  // required .MessageStruct.MoveChess movechess = 2;
  if (has_movechess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->movechess(), target);
  }
  
  // required uint32 token_locate = 3;
  if (has_token_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->token_locate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveAction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 src_user_locate = 1;
    if (has_src_user_locate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_user_locate());
    }
    
    // required .MessageStruct.MoveChess movechess = 2;
    if (has_movechess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movechess());
    }
    
    // required uint32 token_locate = 3;
    if (has_token_locate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token_locate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveAction::MergeFrom(const MoveAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_user_locate()) {
      set_src_user_locate(from.src_user_locate());
    }
    if (from.has_movechess()) {
      mutable_movechess()->::MessageStruct::MoveChess::MergeFrom(from.movechess());
    }
    if (from.has_token_locate()) {
      set_token_locate(from.token_locate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveAction::CopyFrom(const MoveAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_movechess()) {
    if (!this->movechess().IsInitialized()) return false;
  }
  return true;
}

void MoveAction::Swap(MoveAction* other) {
  if (other != this) {
    std::swap(src_user_locate_, other->src_user_locate_);
    std::swap(movechess_, other->movechess_);
    std::swap(token_locate_, other->token_locate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveAction_descriptor_;
  metadata.reflection = MoveAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserMessage::kSrcUserLocateFieldNumber;
const int UserMessage::kMsgContentFieldNumber;
#endif  // !_MSC_VER

UserMessage::UserMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserMessage::InitAsDefaultInstance() {
}

UserMessage::UserMessage(const UserMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserMessage::SharedCtor() {
  _cached_size_ = 0;
  src_user_locate_ = 0u;
  msgcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMessage::~UserMessage() {
  SharedDtor();
}

void UserMessage::SharedDtor() {
  if (msgcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete msgcontent_;
  }
  if (this != default_instance_) {
  }
}

void UserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMessage_descriptor_;
}

const UserMessage& UserMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

UserMessage* UserMessage::default_instance_ = NULL;

UserMessage* UserMessage::New() const {
  return new UserMessage;
}

void UserMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_user_locate_ = 0u;
    if (has_msgcontent()) {
      if (msgcontent_ != &::google::protobuf::internal::kEmptyString) {
        msgcontent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 src_user_locate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_user_locate_)));
          set_has_src_user_locate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgContent;
        break;
      }
      
      // required string msgContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgcontent().data(), this->msgcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 src_user_locate = 1;
  if (has_src_user_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->src_user_locate(), output);
  }
  
  // required string msgContent = 2;
  if (has_msgcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgcontent().data(), this->msgcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msgcontent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 src_user_locate = 1;
  if (has_src_user_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->src_user_locate(), target);
  }
  
  // required string msgContent = 2;
  if (has_msgcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgcontent().data(), this->msgcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgcontent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 src_user_locate = 1;
    if (has_src_user_locate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_user_locate());
    }
    
    // required string msgContent = 2;
    if (has_msgcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgcontent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMessage::MergeFrom(const UserMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_user_locate()) {
      set_src_user_locate(from.src_user_locate());
    }
    if (from.has_msgcontent()) {
      set_msgcontent(from.msgcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMessage::CopyFrom(const UserMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UserMessage::Swap(UserMessage* other) {
  if (other != this) {
    std::swap(src_user_locate_, other->src_user_locate_);
    std::swap(msgcontent_, other->msgcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMessage_descriptor_;
  metadata.reflection = UserMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemMessage::kMsgContentFieldNumber;
#endif  // !_MSC_VER

SystemMessage::SystemMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemMessage::InitAsDefaultInstance() {
}

SystemMessage::SystemMessage(const SystemMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemMessage::SharedCtor() {
  _cached_size_ = 0;
  msgcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemMessage::~SystemMessage() {
  SharedDtor();
}

void SystemMessage::SharedDtor() {
  if (msgcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete msgcontent_;
  }
  if (this != default_instance_) {
  }
}

void SystemMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemMessage_descriptor_;
}

const SystemMessage& SystemMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

SystemMessage* SystemMessage::default_instance_ = NULL;

SystemMessage* SystemMessage::New() const {
  return new SystemMessage;
}

void SystemMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgcontent()) {
      if (msgcontent_ != &::google::protobuf::internal::kEmptyString) {
        msgcontent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msgContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgcontent().data(), this->msgcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msgContent = 1;
  if (has_msgcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgcontent().data(), this->msgcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgcontent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msgContent = 1;
  if (has_msgcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgcontent().data(), this->msgcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgcontent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msgContent = 1;
    if (has_msgcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgcontent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemMessage::MergeFrom(const SystemMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgcontent()) {
      set_msgcontent(from.msgcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemMessage::CopyFrom(const SystemMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SystemMessage::Swap(SystemMessage* other) {
  if (other != this) {
    std::swap(msgcontent_, other->msgcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemMessage_descriptor_;
  metadata.reflection = SystemMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Reconciled::kApplyOrReplyFieldNumber;
const int Reconciled::kSrcUserLocateFieldNumber;
const int Reconciled::kTarUserLocateFieldNumber;
const int Reconciled::kStatusFieldNumber;
#endif  // !_MSC_VER

Reconciled::Reconciled()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Reconciled::InitAsDefaultInstance() {
}

Reconciled::Reconciled(const Reconciled& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Reconciled::SharedCtor() {
  _cached_size_ = 0;
  apply_or_reply_ = 0u;
  src_user_locate_ = 0u;
  tar_user_locate_ = 0u;
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reconciled::~Reconciled() {
  SharedDtor();
}

void Reconciled::SharedDtor() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (this != default_instance_) {
  }
}

void Reconciled::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reconciled::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reconciled_descriptor_;
}

const Reconciled& Reconciled::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

Reconciled* Reconciled::default_instance_ = NULL;

Reconciled* Reconciled::New() const {
  return new Reconciled;
}

void Reconciled::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apply_or_reply_ = 0u;
    src_user_locate_ = 0u;
    tar_user_locate_ = 0u;
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reconciled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 apply_or_reply = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_or_reply_)));
          set_has_apply_or_reply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_user_locate;
        break;
      }
      
      // required uint32 src_user_locate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_user_locate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_user_locate_)));
          set_has_src_user_locate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tar_user_locate;
        break;
      }
      
      // required uint32 tar_user_locate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_user_locate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tar_user_locate_)));
          set_has_tar_user_locate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_status;
        break;
      }
      
      // optional string status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Reconciled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 apply_or_reply = 1;
  if (has_apply_or_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->apply_or_reply(), output);
  }
  
  // required uint32 src_user_locate = 2;
  if (has_src_user_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->src_user_locate(), output);
  }
  
  // required uint32 tar_user_locate = 3;
  if (has_tar_user_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tar_user_locate(), output);
  }
  
  // optional string status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Reconciled::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 apply_or_reply = 1;
  if (has_apply_or_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->apply_or_reply(), target);
  }
  
  // required uint32 src_user_locate = 2;
  if (has_src_user_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->src_user_locate(), target);
  }
  
  // required uint32 tar_user_locate = 3;
  if (has_tar_user_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tar_user_locate(), target);
  }
  
  // optional string status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Reconciled::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 apply_or_reply = 1;
    if (has_apply_or_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_or_reply());
    }
    
    // required uint32 src_user_locate = 2;
    if (has_src_user_locate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_user_locate());
    }
    
    // required uint32 tar_user_locate = 3;
    if (has_tar_user_locate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tar_user_locate());
    }
    
    // optional string status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reconciled::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reconciled* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reconciled*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reconciled::MergeFrom(const Reconciled& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apply_or_reply()) {
      set_apply_or_reply(from.apply_or_reply());
    }
    if (from.has_src_user_locate()) {
      set_src_user_locate(from.src_user_locate());
    }
    if (from.has_tar_user_locate()) {
      set_tar_user_locate(from.tar_user_locate());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reconciled::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reconciled::CopyFrom(const Reconciled& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reconciled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Reconciled::Swap(Reconciled* other) {
  if (other != this) {
    std::swap(apply_or_reply_, other->apply_or_reply_);
    std::swap(src_user_locate_, other->src_user_locate_);
    std::swap(tar_user_locate_, other->tar_user_locate_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reconciled::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reconciled_descriptor_;
  metadata.reflection = Reconciled_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GiveUp::kSrcUserLocateFieldNumber;
const int GiveUp::kOptFieldNumber;
#endif  // !_MSC_VER

GiveUp::GiveUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GiveUp::InitAsDefaultInstance() {
}

GiveUp::GiveUp(const GiveUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GiveUp::SharedCtor() {
  _cached_size_ = 0;
  src_user_locate_ = 0u;
  opt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiveUp::~GiveUp() {
  SharedDtor();
}

void GiveUp::SharedDtor() {
  if (opt_ != &::google::protobuf::internal::kEmptyString) {
    delete opt_;
  }
  if (this != default_instance_) {
  }
}

void GiveUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiveUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiveUp_descriptor_;
}

const GiveUp& GiveUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GiveUp* GiveUp::default_instance_ = NULL;

GiveUp* GiveUp::New() const {
  return new GiveUp;
}

void GiveUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_user_locate_ = 0u;
    if (has_opt()) {
      if (opt_ != &::google::protobuf::internal::kEmptyString) {
        opt_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GiveUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 src_user_locate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_user_locate_)));
          set_has_src_user_locate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_opt;
        break;
      }
      
      // optional string opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opt().data(), this->opt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiveUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 src_user_locate = 1;
  if (has_src_user_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->src_user_locate(), output);
  }
  
  // optional string opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt().data(), this->opt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->opt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GiveUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 src_user_locate = 1;
  if (has_src_user_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->src_user_locate(), target);
  }
  
  // optional string opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt().data(), this->opt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->opt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GiveUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 src_user_locate = 1;
    if (has_src_user_locate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_user_locate());
    }
    
    // optional string opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiveUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GiveUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GiveUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GiveUp::MergeFrom(const GiveUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_user_locate()) {
      set_src_user_locate(from.src_user_locate());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GiveUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiveUp::CopyFrom(const GiveUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiveUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GiveUp::Swap(GiveUp* other) {
  if (other != this) {
    std::swap(src_user_locate_, other->src_user_locate_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GiveUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiveUp_descriptor_;
  metadata.reflection = GiveUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Undo::kRepOrResponFieldNumber;
const int Undo::kSrcUserLocateFieldNumber;
const int Undo::kTarUserLocateFieldNumber;
const int Undo::kStatusFieldNumber;
#endif  // !_MSC_VER

Undo::Undo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Undo::InitAsDefaultInstance() {
}

Undo::Undo(const Undo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Undo::SharedCtor() {
  _cached_size_ = 0;
  rep_or_respon_ = 0u;
  src_user_locate_ = 0u;
  tar_user_locate_ = 0u;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Undo::~Undo() {
  SharedDtor();
}

void Undo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Undo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Undo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Undo_descriptor_;
}

const Undo& Undo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

Undo* Undo::default_instance_ = NULL;

Undo* Undo::New() const {
  return new Undo;
}

void Undo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rep_or_respon_ = 0u;
    src_user_locate_ = 0u;
    tar_user_locate_ = 0u;
    status_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Undo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rep_or_respon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rep_or_respon_)));
          set_has_rep_or_respon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_user_locate;
        break;
      }
      
      // required uint32 src_user_locate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_user_locate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_user_locate_)));
          set_has_src_user_locate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tar_user_locate;
        break;
      }
      
      // required uint32 tar_user_locate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tar_user_locate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tar_user_locate_)));
          set_has_tar_user_locate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }
      
      // optional bool status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Undo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rep_or_respon = 1;
  if (has_rep_or_respon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rep_or_respon(), output);
  }
  
  // required uint32 src_user_locate = 2;
  if (has_src_user_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->src_user_locate(), output);
  }
  
  // required uint32 tar_user_locate = 3;
  if (has_tar_user_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tar_user_locate(), output);
  }
  
  // optional bool status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Undo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rep_or_respon = 1;
  if (has_rep_or_respon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rep_or_respon(), target);
  }
  
  // required uint32 src_user_locate = 2;
  if (has_src_user_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->src_user_locate(), target);
  }
  
  // required uint32 tar_user_locate = 3;
  if (has_tar_user_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tar_user_locate(), target);
  }
  
  // optional bool status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Undo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rep_or_respon = 1;
    if (has_rep_or_respon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rep_or_respon());
    }
    
    // required uint32 src_user_locate = 2;
    if (has_src_user_locate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_user_locate());
    }
    
    // required uint32 tar_user_locate = 3;
    if (has_tar_user_locate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tar_user_locate());
    }
    
    // optional bool status = 4;
    if (has_status()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Undo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Undo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Undo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Undo::MergeFrom(const Undo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rep_or_respon()) {
      set_rep_or_respon(from.rep_or_respon());
    }
    if (from.has_src_user_locate()) {
      set_src_user_locate(from.src_user_locate());
    }
    if (from.has_tar_user_locate()) {
      set_tar_user_locate(from.tar_user_locate());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Undo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Undo::CopyFrom(const Undo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Undo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Undo::Swap(Undo* other) {
  if (other != this) {
    std::swap(rep_or_respon_, other->rep_or_respon_);
    std::swap(src_user_locate_, other->src_user_locate_);
    std::swap(tar_user_locate_, other->tar_user_locate_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Undo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Undo_descriptor_;
  metadata.reflection = Undo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameReadyReq::kSrcUserLocateFieldNumber;
const int GameReadyReq::kOpcodeFieldNumber;
const int GameReadyReq::kTotalTimeFieldNumber;
const int GameReadyReq::kSingleStepTimeFieldNumber;
#endif  // !_MSC_VER

GameReadyReq::GameReadyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameReadyReq::InitAsDefaultInstance() {
}

GameReadyReq::GameReadyReq(const GameReadyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameReadyReq::SharedCtor() {
  _cached_size_ = 0;
  src_user_locate_ = 0u;
  opcode_ = 0u;
  total_time_ = 0u;
  single_step_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameReadyReq::~GameReadyReq() {
  SharedDtor();
}

void GameReadyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameReadyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameReadyReq_descriptor_;
}

const GameReadyReq& GameReadyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GameReadyReq* GameReadyReq::default_instance_ = NULL;

GameReadyReq* GameReadyReq::New() const {
  return new GameReadyReq;
}

void GameReadyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_user_locate_ = 0u;
    opcode_ = 0u;
    total_time_ = 0u;
    single_step_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 src_user_locate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_user_locate_)));
          set_has_src_user_locate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opcode;
        break;
      }
      
      // optional uint32 opcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
          set_has_opcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_time;
        break;
      }
      
      // optional uint32 total_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_single_step_time;
        break;
      }
      
      // optional uint32 single_step_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single_step_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &single_step_time_)));
          set_has_single_step_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 src_user_locate = 1;
  if (has_src_user_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->src_user_locate(), output);
  }
  
  // optional uint32 opcode = 2;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opcode(), output);
  }
  
  // optional uint32 total_time = 3;
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_time(), output);
  }
  
  // optional uint32 single_step_time = 4;
  if (has_single_step_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->single_step_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameReadyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 src_user_locate = 1;
  if (has_src_user_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->src_user_locate(), target);
  }
  
  // optional uint32 opcode = 2;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opcode(), target);
  }
  
  // optional uint32 total_time = 3;
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_time(), target);
  }
  
  // optional uint32 single_step_time = 4;
  if (has_single_step_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->single_step_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameReadyReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 src_user_locate = 1;
    if (has_src_user_locate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_user_locate());
    }
    
    // optional uint32 opcode = 2;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opcode());
    }
    
    // optional uint32 total_time = 3;
    if (has_total_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_time());
    }
    
    // optional uint32 single_step_time = 4;
    if (has_single_step_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->single_step_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameReadyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameReadyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameReadyReq::MergeFrom(const GameReadyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_user_locate()) {
      set_src_user_locate(from.src_user_locate());
    }
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
    if (from.has_single_step_time()) {
      set_single_step_time(from.single_step_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameReadyReq::CopyFrom(const GameReadyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameReadyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GameReadyReq::Swap(GameReadyReq* other) {
  if (other != this) {
    std::swap(src_user_locate_, other->src_user_locate_);
    std::swap(opcode_, other->opcode_);
    std::swap(total_time_, other->total_time_);
    std::swap(single_step_time_, other->single_step_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameReadyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameReadyReq_descriptor_;
  metadata.reflection = GameReadyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameStatusReply::kLeftUserStatusFieldNumber;
const int GameStatusReply::kRightUserStatusFieldNumber;
const int GameStatusReply::kBottomUserStatusFieldNumber;
const int GameStatusReply::kTokenLocateFieldNumber;
const int GameStatusReply::kTotalTimeFieldNumber;
const int GameStatusReply::kSingleStepTimeFieldNumber;
#endif  // !_MSC_VER

GameStatusReply::GameStatusReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameStatusReply::InitAsDefaultInstance() {
}

GameStatusReply::GameStatusReply(const GameStatusReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameStatusReply::SharedCtor() {
  _cached_size_ = 0;
  left_user_status_ = false;
  right_user_status_ = false;
  bottom_user_status_ = false;
  token_locate_ = 0u;
  total_time_ = 0u;
  single_step_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStatusReply::~GameStatusReply() {
  SharedDtor();
}

void GameStatusReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStatusReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStatusReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStatusReply_descriptor_;
}

const GameStatusReply& GameStatusReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

GameStatusReply* GameStatusReply::default_instance_ = NULL;

GameStatusReply* GameStatusReply::New() const {
  return new GameStatusReply;
}

void GameStatusReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_user_status_ = false;
    right_user_status_ = false;
    bottom_user_status_ = false;
    token_locate_ = 0u;
    total_time_ = 0u;
    single_step_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStatusReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool left_user_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_user_status_)));
          set_has_left_user_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_right_user_status;
        break;
      }
      
      // required bool right_user_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right_user_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_user_status_)));
          set_has_right_user_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bottom_user_status;
        break;
      }
      
      // required bool bottom_user_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bottom_user_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bottom_user_status_)));
          set_has_bottom_user_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_token_locate;
        break;
      }
      
      // required uint32 token_locate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_locate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_locate_)));
          set_has_token_locate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_time;
        break;
      }
      
      // required uint32 total_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_single_step_time;
        break;
      }
      
      // required uint32 single_step_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single_step_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &single_step_time_)));
          set_has_single_step_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameStatusReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool left_user_status = 1;
  if (has_left_user_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->left_user_status(), output);
  }
  
  // required bool right_user_status = 2;
  if (has_right_user_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->right_user_status(), output);
  }
  
  // required bool bottom_user_status = 3;
  if (has_bottom_user_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bottom_user_status(), output);
  }
  
  // required uint32 token_locate = 4;
  if (has_token_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->token_locate(), output);
  }
  
  // required uint32 total_time = 5;
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->total_time(), output);
  }
  
  // required uint32 single_step_time = 6;
  if (has_single_step_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->single_step_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameStatusReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool left_user_status = 1;
  if (has_left_user_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->left_user_status(), target);
  }
  
  // required bool right_user_status = 2;
  if (has_right_user_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->right_user_status(), target);
  }
  
  // required bool bottom_user_status = 3;
  if (has_bottom_user_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bottom_user_status(), target);
  }
  
  // required uint32 token_locate = 4;
  if (has_token_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->token_locate(), target);
  }
  
  // required uint32 total_time = 5;
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->total_time(), target);
  }
  
  // required uint32 single_step_time = 6;
  if (has_single_step_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->single_step_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameStatusReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool left_user_status = 1;
    if (has_left_user_status()) {
      total_size += 1 + 1;
    }
    
    // required bool right_user_status = 2;
    if (has_right_user_status()) {
      total_size += 1 + 1;
    }
    
    // required bool bottom_user_status = 3;
    if (has_bottom_user_status()) {
      total_size += 1 + 1;
    }
    
    // required uint32 token_locate = 4;
    if (has_token_locate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token_locate());
    }
    
    // required uint32 total_time = 5;
    if (has_total_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_time());
    }
    
    // required uint32 single_step_time = 6;
    if (has_single_step_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->single_step_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStatusReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStatusReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameStatusReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStatusReply::MergeFrom(const GameStatusReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_user_status()) {
      set_left_user_status(from.left_user_status());
    }
    if (from.has_right_user_status()) {
      set_right_user_status(from.right_user_status());
    }
    if (from.has_bottom_user_status()) {
      set_bottom_user_status(from.bottom_user_status());
    }
    if (from.has_token_locate()) {
      set_token_locate(from.token_locate());
    }
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
    if (from.has_single_step_time()) {
      set_single_step_time(from.single_step_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStatusReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStatusReply::CopyFrom(const GameStatusReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStatusReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void GameStatusReply::Swap(GameStatusReply* other) {
  if (other != this) {
    std::swap(left_user_status_, other->left_user_status_);
    std::swap(right_user_status_, other->right_user_status_);
    std::swap(bottom_user_status_, other->bottom_user_status_);
    std::swap(token_locate_, other->token_locate_);
    std::swap(total_time_, other->total_time_);
    std::swap(single_step_time_, other->single_step_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameStatusReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStatusReply_descriptor_;
  metadata.reflection = GameStatusReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindPassword::kEmailFieldNumber;
const int FindPassword::kOptFieldNumber;
#endif  // !_MSC_VER

FindPassword::FindPassword()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindPassword::InitAsDefaultInstance() {
}

FindPassword::FindPassword(const FindPassword& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindPassword::SharedCtor() {
  _cached_size_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindPassword::~FindPassword() {
  SharedDtor();
}

void FindPassword::SharedDtor() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (opt_ != &::google::protobuf::internal::kEmptyString) {
    delete opt_;
  }
  if (this != default_instance_) {
  }
}

void FindPassword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindPassword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindPassword_descriptor_;
}

const FindPassword& FindPassword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

FindPassword* FindPassword::default_instance_ = NULL;

FindPassword* FindPassword::New() const {
  return new FindPassword;
}

void FindPassword::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_opt()) {
      if (opt_ != &::google::protobuf::internal::kEmptyString) {
        opt_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindPassword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string email = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_opt;
        break;
      }
      
      // optional string opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opt().data(), this->opt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindPassword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->email(), output);
  }
  
  // optional string opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt().data(), this->opt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->opt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindPassword::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->email(), target);
  }
  
  // optional string opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt().data(), this->opt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->opt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindPassword::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string email = 1;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }
    
    // optional string opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindPassword::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindPassword* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindPassword*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindPassword::MergeFrom(const FindPassword& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindPassword::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindPassword::CopyFrom(const FindPassword& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindPassword::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FindPassword::Swap(FindPassword* other) {
  if (other != this) {
    std::swap(email_, other->email_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindPassword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindPassword_descriptor_;
  metadata.reflection = FindPassword_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserInfo::kUserNameFieldNumber;
const int UpdateUserInfo::kAccountFieldNumber;
const int UpdateUserInfo::kPasswordFieldNumber;
const int UpdateUserInfo::kExEmailFieldNumber;
const int UpdateUserInfo::kPhoneFieldNumber;
const int UpdateUserInfo::kHeadImageFieldNumber;
#endif  // !_MSC_VER

UpdateUserInfo::UpdateUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateUserInfo::InitAsDefaultInstance() {
}

UpdateUserInfo::UpdateUserInfo(const UpdateUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateUserInfo::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ex_email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserInfo::~UpdateUserInfo() {
  SharedDtor();
}

void UpdateUserInfo::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (ex_email_ != &::google::protobuf::internal::kEmptyString) {
    delete ex_email_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (head_image_ != &::google::protobuf::internal::kEmptyString) {
    delete head_image_;
  }
  if (this != default_instance_) {
  }
}

void UpdateUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserInfo_descriptor_;
}

const UpdateUserInfo& UpdateUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

UpdateUserInfo* UpdateUserInfo::default_instance_ = NULL;

UpdateUserInfo* UpdateUserInfo::New() const {
  return new UpdateUserInfo;
}

void UpdateUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_ex_email()) {
      if (ex_email_ != &::google::protobuf::internal::kEmptyString) {
        ex_email_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_head_image()) {
      if (head_image_ != &::google::protobuf::internal::kEmptyString) {
        head_image_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }
      
      // required string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ex_email;
        break;
      }
      
      // optional string ex_email = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ex_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ex_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ex_email().data(), this->ex_email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_phone;
        break;
      }
      
      // optional string phone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_head_image;
        break;
      }
      
      // optional bytes head_image = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }
  
  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // optional string ex_email = 4;
  if (has_ex_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ex_email().data(), this->ex_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ex_email(), output);
  }
  
  // optional string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->phone(), output);
  }
  
  // optional bytes head_image = 6;
  if (has_head_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->head_image(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }
  
  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // optional string ex_email = 4;
  if (has_ex_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ex_email().data(), this->ex_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ex_email(), target);
  }
  
  // optional string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phone(), target);
  }
  
  // optional bytes head_image = 6;
  if (has_head_image()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->head_image(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateUserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // required string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string ex_email = 4;
    if (has_ex_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ex_email());
    }
    
    // optional string phone = 5;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }
    
    // optional bytes head_image = 6;
    if (has_head_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->head_image());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserInfo::MergeFrom(const UpdateUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_ex_email()) {
      set_ex_email(from.ex_email());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_head_image()) {
      set_head_image(from.head_image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserInfo::CopyFrom(const UpdateUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void UpdateUserInfo::Swap(UpdateUserInfo* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(ex_email_, other->ex_email_);
    std::swap(phone_, other->phone_);
    std::swap(head_image_, other->head_image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserInfo_descriptor_;
  metadata.reflection = UpdateUserInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MessageStruct

// @@protoc_insertion_point(global_scope)
